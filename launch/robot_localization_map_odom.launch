<?xml version="1.0"?>
<!-- Launch file for ekf_localization_node -->

<launch>

    <!-- This node will take in measurements from odometry, IMU, stamped pose, and stamped twist messages. It tracks
         the state of the robot, with the state vector being defined as X position, Y position, Z position,
         roll, pitch, yaw, and the respective velocites for those quantities. Accelerations are not used (yet).
         Units for all measurements are assumed to be in meters and radians. By default, the node outputs an
         Odometry message with the topic name odometry/filtered. Use the remap tag to change this. -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" clear_params="true">

      <!-- The frequency, in Hz, at which the filter will output a position estimate. Note that
           the filter will not begin computation until it receives at least one message from
           one of the inputs. It will then run continuously at the frequency specified here,
           regardless of whether it receives more measurements. --> 
      <param name="frequency" value="1"/>  <!-- before 30 -->

      <!-- The period, in seconds, after which we consider a sensor to have timed out. In this event, we
           carry out a predict cycle on the EKF without correcting it. This parameter can be thought of
           as the minimum frequency with which the filter will generate output. -->
      <param name="sensor_timeout" value="3"/>  <!-- before 0.1 -->

      <!-- If this is set to true, no 3D information will be used in your state estimate. Use this if you
           are operating in a planar environment and want to ignore the effect of small variations in the
           ground plane that might otherwise be detected by, for example, an IMU. -->
      <param name="two_d_mode" value="true"/>

      <!-- REP-105 (http://www.ros.org/reps/rep-0105.html) specifies three principal coordinate frames: map, 
           odom, and base_link. base_link is the coordinate frame that is affixed to the robot. The robot's 
           position in the odom frame will drift over time, but is accurate in the short term and should be 
           continuous. The odom frame is therefore the best frame for executing local motion plans. The map 
           frame, like the odom frame, is a world-fixed coordinate frame, and while it contains the most 
           globally accurate position estimate for your robot, it is subject to discrete jumps, e.g., due to 
           the fusion of GPS data. Here is how to use the following settings:
             1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
                  * If your system does not have a map_frame, just remove it, and make sure "world_frame" is set
                    to the value of odom_frame.
             2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data,
                set "world_frame" to your odom_frame value. This is the default behavior for robot_localization's state 
                estimation nodes.
             3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position
                updates from landmark observations) then:
                  3a. Set your "world_frame" to your map_frame value
                  3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be
                      another instance of robot_localization! However, that instance should *not* fuse the global data. -->
      <param name="map_frame" value="map"/>
      <param name="odom_frame" value="odom"/>
      <param name="base_link_frame" value="base_link"/>
      <param name="world_frame" value="map"/>

      <!-- The filter accepts an arbitrary number of inputs from each input message type (Odometry, PoseStamped,
           TwistStamped, Imu). To add a new one, simply append the next number in the sequence to its base name,
           e.g., odom0, odom1, twist0, twist1, imu0, imu1, imu2, etc. The value should be the topic name. -->

      <param name="pose0" value="amcl_pose"/>
      <param name="pose1" value="ar_pose"/>

      <!-- Each sensor reading updates some or all of the filter's state. These options give you greater control over
           which values from each measurement are fed to the filter. For example, if you have an odometry message as input,
           but only want to use its Z position value, then set the entire vector to false, except for the third entry.
           The order of the values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw. Note that not some message
           types lack certain variables. For example, a TwistWithCovarianceStamped message has no pose information, so the first
           six values would be meaningless in that case. -->
      
      <rosparam param="pose0_config">[true,  true,  false, 
                                      false, false, true, 
                                      false, false, false, 
                                      false, false, false]</rosparam>

      <rosparam param="pose1_config">[true,  true,  false, 
                                      false, false, true, 
                                      false, false, false, 
                                      false, false, false]</rosparam>


      <!-- The best practice for including new sensors in robot_localization's state estimation nodes is to pass in velocity 
           measurements and let the nodoes integrate them. However, this isn't always feasible, and so the state estimation
           nodes support fusion of absolute measurements. If you have more than one sensor providing absolute measurements, 
           however, you will quickly run into problems, as the sensors will inevitably diverge from one another, causing the 
           filter to jump back and forth rapidly. To combat this situation, you can set the sensor's differential parameter 
           to true. This will carry out differential integration of the sensor data, i.e., it will repeatedly integrate the 
           difference between a given measurement and the previous measurement from that sensor. 
           NOTE: this only applies to sensors that provide absolute measurements, so Twist messages are not supported. -->

      <param name="pose0_differential" value="true"/>
      <param name="pose1_differential" value="true"/>

      <!-- If we're including accelerations in our state estimate, then we'll probably want to remove any acceleration that
           is due to gravity. If you don't want to, then set this to false. -->
      <param name="remove_gravitational_acceleration" value="true"/>

      <!-- Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file
           specified by debug_out_file. I hope you like matrices! -->
      <param name="debug"           value="false"/>
      <param name="debug_out_file"  value="debug_ekf_localization.txt"/>

      <!-- The process noise covariance matrix can be difficult to tune, and can vary for each application, so it
           is exposed as a configuration parameter. PLEASE NOTE that every value in this matrix *must* be specified
           as real-valued, i.e., it must have a decimal point. Integers don't load correctly. The values are ordered
           as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw. -->
      <rosparam param="process_noise_covariance">[0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.05, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.002, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004]</rosparam>

    </node>
	 
</launch>
